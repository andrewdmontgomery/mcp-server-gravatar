# coding: utf-8

"""
    Gravatar Public API

    Gravatar's public API endpoints

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.crypto_wallet_address import CryptoWalletAddress
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class ProfilePayments(BaseModel):
    """
    The user's public payment information. This is only provided in authenticated API requests.
    """ # noqa: E501
    links: List[Link] = Field(description="A list of payment URLs the user has added to their profile.")
    crypto_wallets: List[CryptoWalletAddress] = Field(description="A list of crypto currencies the user accepts.")
    __properties: ClassVar[List[str]] = ["links", "crypto_wallets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfilePayments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in crypto_wallets (list)
        _items = []
        if self.crypto_wallets:
            for _item_crypto_wallets in self.crypto_wallets:
                if _item_crypto_wallets:
                    _items.append(_item_crypto_wallets.to_dict())
            _dict['crypto_wallets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfilePayments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "crypto_wallets": [CryptoWalletAddress.from_dict(_item) for _item in obj["crypto_wallets"]] if obj.get("crypto_wallets") is not None else None
        })
        return _obj


