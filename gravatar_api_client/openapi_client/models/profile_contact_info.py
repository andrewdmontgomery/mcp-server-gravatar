# coding: utf-8

"""
    Gravatar Public API

    Gravatar's public API endpoints

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProfileContactInfo(BaseModel):
    """
    The user's contact information. This is only available if the user has chosen to make it public. This is only provided in authenticated API requests.
    """ # noqa: E501
    home_phone: Optional[StrictStr] = Field(default=None, description="The user's home phone number.")
    work_phone: Optional[StrictStr] = Field(default=None, description="The user's work phone number.")
    cell_phone: Optional[StrictStr] = Field(default=None, description="The user's cell phone number.")
    email: Optional[StrictStr] = Field(default=None, description="The user's email address as provided on the contact section of the profile. Might differ from their account emails.")
    contact_form: Optional[StrictStr] = Field(default=None, description="The URL to the user's contact form.")
    calendar: Optional[StrictStr] = Field(default=None, description="The URL to the user's calendar.")
    __properties: ClassVar[List[str]] = ["home_phone", "work_phone", "cell_phone", "email", "contact_form", "calendar"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileContactInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileContactInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "home_phone": obj.get("home_phone"),
            "work_phone": obj.get("work_phone"),
            "cell_phone": obj.get("cell_phone"),
            "email": obj.get("email"),
            "contact_form": obj.get("contact_form"),
            "calendar": obj.get("calendar")
        })
        return _obj


