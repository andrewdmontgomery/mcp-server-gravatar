# coding: utf-8

"""
    Gravatar Public API

    Gravatar's public API endpoints

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class Avatar(BaseModel):
    """
    An avatar that the user has already uploaded to their Gravatar account.
    """  # noqa: E501
    image_id: StrictStr = Field(description="Unique identifier for the image.")
    image_url: StrictStr = Field(description="Image URL")
    rating: StrictStr = Field(description="Rating associated with the image.")
    alt_text: StrictStr = Field(
        description="Alternative text description of the image.")
    selected: Optional[StrictBool] = Field(
        default=None, description="Whether the image is currently selected as the provided selected email's avatar.")
    updated_date: datetime = Field(
        description="Date and time when the image was last updated.")
    __properties: ClassVar[List[str]] = [
        "image_id", "image_url", "rating", "alt_text", "selected", "updated_date"]

    @field_validator('rating')
    def rating_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['G', 'PG', 'R', 'X']):
            raise ValueError(
                "must be one of enum values ('G', 'PG', 'R', 'X')")
        return value

    @field_validator('updated_date')
    def updated_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        # If already a datetime, skip regex validation
        if isinstance(value, datetime):
            return value
        # Otherwise, ensure it's an ISO-style string
        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$", value):
            raise ValueError(
                r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Avatar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Avatar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "image_id": obj.get("image_id"),
            "image_url": obj.get("image_url"),
            "rating": obj.get("rating"),
            "alt_text": obj.get("alt_text"),
            "selected": obj.get("selected"),
            "updated_date": obj.get("updated_date")
        })
        return _obj
